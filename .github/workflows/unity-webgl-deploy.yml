name: Unity WebGL → Deploy

on:
  push:
<<<<<<< Updated upstream
    branches: [ "main" ]          # main 푸시 시 자동 실행
  workflow_dispatch:               # 수동 실행 지원
=======
    branches: [ "Build" ]            # Build 브랜치 푸시 시 자동 실행
  workflow_dispatch:                 # 수동 실행 지원
>>>>>>> Stashed changes
    inputs:
      deploy_target:
        description: "netlify | vercel | s3 | none"
        required: false
        default: "none"              # 기본값 none → 토큰 없어도 빌드만 수행

# 전역 기본값
env:
  UNITY_VERSION: 6000.0.51f1         # ← 프로젝트 Unity 버전에 맞게 수정
  PROJECT_PATH: .                    # ← Unity 프로젝트 루트
  BUILD_NAME: WebGL
  BUILDS_PATH: build                 # ← v4는 buildsPath 사용 (기본: build)

jobs:
  build-webgl:
    name: Build (WebGL)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (with LFS)
        uses: actions/checkout@v4
        with:
          lfs: true
          submodules: recursive

      - name: Cache Unity Library
        uses: actions/cache@v4
        with:
          path: ${{ env.PROJECT_PATH }}/Library
          key: Library-${{ env.BUILD_NAME }}-WebGL-${{ hashFiles('**/Packages/manifest.json') }}
          restore-keys: |
            Library-${{ env.BUILD_NAME }}-WebGL-
            Library-

      - name: Build WebGL
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}  # Personal이면 ULF 전체 문자열
          # 필요 시 사용 (시크릿 추가 후 주석 해제)
          # UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          # UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          projectPath: ${{ env.PROJECT_PATH }}
          unityVersion: ${{ env.UNITY_VERSION }}
          targetPlatform: WebGL
          allowDirtyBuild: true
          buildName: ${{ env.BUILD_NAME }}     # 폴더명 (예: build/WebGL)
          buildsPath: ${{ env.BUILDS_PATH }}   # 출력 루트 (예: build)

      - name: Upload artifact (WebGL folder contents)
        uses: actions/upload-artifact@v4
        with:
          name: webgl-build
          # 폴더 '내용물'만 업로드 → dist 바로 밑에 index.html 오도록
          path: ${{ env.BUILDS_PATH }}/${{ env.BUILD_NAME }}/
          if-no-files-found: error

  deploy:
    name: Deploy (${{ github.event.inputs.deploy_target || 'none' }})
    needs: build-webgl
    runs-on: ubuntu-latest
    # deploy_target이 none이면 배포 잡 자체를 스킵
    if: ${{ (github.event.inputs.deploy_target || 'none') != 'none' }}

    # AWS OIDC 사용 시 필요한 권한 (Netlify/Vercel엔 영향 없음)
    permissions:
      contents: read
      id-token: write

    env:
      DEPLOY_TARGET: ${{ github.event.inputs.deploy_target || 'none' }}

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: webgl-build
          path: dist

      # ───────── Netlify ─────────
      - name: Install Netlify CLI
        if: env.DEPLOY_TARGET == 'netlify'
        run: npm i -g netlify-cli

      - name: Deploy to Netlify
        if: env.DEPLOY_TARGET == 'netlify'
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        run: netlify deploy --dir=dist --prod --site "$NETLIFY_SITE_ID"

      # ───────── Vercel ─────────
      - name: Install Vercel CLI
        if: env.DEPLOY_TARGET == 'vercel'
        run: npm i -g vercel

      - name: Deploy to Vercel
        if: env.DEPLOY_TARGET == 'vercel'
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          vercel deploy dist --prod --token "$VERCEL_TOKEN" \
            --scope "$VERCEL_ORG_ID" --project "$VERCEL_PROJECT_ID"

      # ───────── S3 ─────────
      - name: Configure AWS Credentials (OIDC)
        if: env.DEPLOY_TARGET == 's3'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Sync to S3
        if: env.DEPLOY_TARGET == 's3'
        run: aws s3 sync dist "s3://${{ secrets.S3_BUCKET }}/" --delete
